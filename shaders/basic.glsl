#ifdef VERTEX_SHADER

////////////////////////////////////////////////////////////////////////////////
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNorm;
layout (location = 2) in vec2 aTexCoord;

////////////////////////////////////////////////////////////////////////////////
uniform mat4 uPVM;
uniform mat4 uModel;
uniform vec2 uTexMultiplier;

////////////////////////////////////////////////////////////////////////////////
out vec3 vNorm;
out vec2 vTexCoord;

////////////////////////////////////////////////////////////////////////////////
void main()
{
        gl_Position = uPVM * vec4(aPos, 1.0f);
        vNorm = mat3(uModel) * aNorm;
        vTexCoord = uTexMultiplier * aTexCoord;
}

#elif defined(FRAGMENT_SHADER)

////////////////////////////////////////////////////////////////////////////////
in vec3 vNorm;
in vec2 vTexCoord;

////////////////////////////////////////////////////////////////////////////////
struct material_t
{
        vec4 color;
        bool enableTexture;
        sampler2D materialTexture;
};

////////////////////////////////////////////////////////////////////////////////
uniform vec4 uColor;
uniform material_t uMaterial;

////////////////////////////////////////////////////////////////////////////////
out vec4 color;

////////////////////////////////////////////////////////////////////////////////
vec4 computeColor(material_t material)
{
        vec4 color = (material.enableTexture
                   ? texture(material.materialTexture, vTexCoord)
                   * material.color
                   : material.color);
        return color;
}

////////////////////////////////////////////////////////////////////////////////
void main()
{
        color = computeColor(uMaterial);
}

#endif
